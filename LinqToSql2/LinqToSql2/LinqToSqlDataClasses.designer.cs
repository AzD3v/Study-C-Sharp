#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinqToSql2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MyWorkingDB")]
	public partial class LinqToSqlDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLibrary(Library instance);
    partial void UpdateLibrary(Library instance);
    partial void DeleteLibrary(Library instance);
    partial void InsertReader(Reader instance);
    partial void UpdateReader(Reader instance);
    partial void DeleteReader(Reader instance);
    partial void InsertReadingSession(ReadingSession instance);
    partial void UpdateReadingSession(ReadingSession instance);
    partial void DeleteReadingSession(ReadingSession instance);
    partial void InsertReaderReadingSession(ReaderReadingSession instance);
    partial void UpdateReaderReadingSession(ReaderReadingSession instance);
    partial void DeleteReaderReadingSession(ReaderReadingSession instance);
    #endregion
		
		public LinqToSqlDataClassesDataContext() : 
				base(global::LinqToSql2.Properties.Settings.Default.MyWorkingDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSqlDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Library> Libraries
		{
			get
			{
				return this.GetTable<Library>();
			}
		}
		
		public System.Data.Linq.Table<Reader> Readers
		{
			get
			{
				return this.GetTable<Reader>();
			}
		}
		
		public System.Data.Linq.Table<ReadingSession> ReadingSessions
		{
			get
			{
				return this.GetTable<ReadingSession>();
			}
		}
		
		public System.Data.Linq.Table<ReaderReadingSession> ReaderReadingSessions
		{
			get
			{
				return this.GetTable<ReaderReadingSession>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Library")]
	public partial class Library : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Reader> _Readers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Library()
		{
			this._Readers = new EntitySet<Reader>(new Action<Reader>(this.attach_Readers), new Action<Reader>(this.detach_Readers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Library_Reader", Storage="_Readers", ThisKey="Id", OtherKey="LibraryId")]
		public EntitySet<Reader> Readers
		{
			get
			{
				return this._Readers;
			}
			set
			{
				this._Readers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Readers(Reader entity)
		{
			this.SendPropertyChanging();
			entity.Library = this;
		}
		
		private void detach_Readers(Reader entity)
		{
			this.SendPropertyChanging();
			entity.Library = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reader")]
	public partial class Reader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Gender;
		
		private int _LibraryId;
		
		private EntitySet<ReaderReadingSession> _ReaderReadingSessions;
		
		private EntityRef<Library> _Library;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnLibraryIdChanging(int value);
    partial void OnLibraryIdChanged();
    #endregion
		
		public Reader()
		{
			this._ReaderReadingSessions = new EntitySet<ReaderReadingSession>(new Action<ReaderReadingSession>(this.attach_ReaderReadingSessions), new Action<ReaderReadingSession>(this.detach_ReaderReadingSessions));
			this._Library = default(EntityRef<Library>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LibraryId", DbType="Int NOT NULL")]
		public int LibraryId
		{
			get
			{
				return this._LibraryId;
			}
			set
			{
				if ((this._LibraryId != value))
				{
					if (this._Library.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLibraryIdChanging(value);
					this.SendPropertyChanging();
					this._LibraryId = value;
					this.SendPropertyChanged("LibraryId");
					this.OnLibraryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reader_ReaderReadingSession", Storage="_ReaderReadingSessions", ThisKey="Id", OtherKey="ReaderId")]
		public EntitySet<ReaderReadingSession> ReaderReadingSessions
		{
			get
			{
				return this._ReaderReadingSessions;
			}
			set
			{
				this._ReaderReadingSessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Library_Reader", Storage="_Library", ThisKey="LibraryId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Library Library
		{
			get
			{
				return this._Library.Entity;
			}
			set
			{
				Library previousValue = this._Library.Entity;
				if (((previousValue != value) 
							|| (this._Library.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Library.Entity = null;
						previousValue.Readers.Remove(this);
					}
					this._Library.Entity = value;
					if ((value != null))
					{
						value.Readers.Add(this);
						this._LibraryId = value.Id;
					}
					else
					{
						this._LibraryId = default(int);
					}
					this.SendPropertyChanged("Library");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReaderReadingSessions(ReaderReadingSession entity)
		{
			this.SendPropertyChanging();
			entity.Reader = this;
		}
		
		private void detach_ReaderReadingSessions(ReaderReadingSession entity)
		{
			this.SendPropertyChanging();
			entity.Reader = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReadingSession")]
	public partial class ReadingSession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<ReaderReadingSession> _ReaderReadingSessions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ReadingSession()
		{
			this._ReaderReadingSessions = new EntitySet<ReaderReadingSession>(new Action<ReaderReadingSession>(this.attach_ReaderReadingSessions), new Action<ReaderReadingSession>(this.detach_ReaderReadingSessions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReadingSession_ReaderReadingSession", Storage="_ReaderReadingSessions", ThisKey="Id", OtherKey="ReadingSessionId")]
		public EntitySet<ReaderReadingSession> ReaderReadingSessions
		{
			get
			{
				return this._ReaderReadingSessions;
			}
			set
			{
				this._ReaderReadingSessions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReaderReadingSessions(ReaderReadingSession entity)
		{
			this.SendPropertyChanging();
			entity.ReadingSession = this;
		}
		
		private void detach_ReaderReadingSessions(ReaderReadingSession entity)
		{
			this.SendPropertyChanging();
			entity.ReadingSession = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReaderReadingSession")]
	public partial class ReaderReadingSession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ReaderId;
		
		private int _ReadingSessionId;
		
		private EntityRef<Reader> _Reader;
		
		private EntityRef<ReadingSession> _ReadingSession;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnReaderIdChanging(int value);
    partial void OnReaderIdChanged();
    partial void OnReadingSessionIdChanging(int value);
    partial void OnReadingSessionIdChanged();
    #endregion
		
		public ReaderReadingSession()
		{
			this._Reader = default(EntityRef<Reader>);
			this._ReadingSession = default(EntityRef<ReadingSession>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReaderId", DbType="Int NOT NULL")]
		public int ReaderId
		{
			get
			{
				return this._ReaderId;
			}
			set
			{
				if ((this._ReaderId != value))
				{
					if (this._Reader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReaderIdChanging(value);
					this.SendPropertyChanging();
					this._ReaderId = value;
					this.SendPropertyChanged("ReaderId");
					this.OnReaderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadingSessionId", DbType="Int NOT NULL")]
		public int ReadingSessionId
		{
			get
			{
				return this._ReadingSessionId;
			}
			set
			{
				if ((this._ReadingSessionId != value))
				{
					if (this._ReadingSession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReadingSessionIdChanging(value);
					this.SendPropertyChanging();
					this._ReadingSessionId = value;
					this.SendPropertyChanged("ReadingSessionId");
					this.OnReadingSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reader_ReaderReadingSession", Storage="_Reader", ThisKey="ReaderId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Reader Reader
		{
			get
			{
				return this._Reader.Entity;
			}
			set
			{
				Reader previousValue = this._Reader.Entity;
				if (((previousValue != value) 
							|| (this._Reader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reader.Entity = null;
						previousValue.ReaderReadingSessions.Remove(this);
					}
					this._Reader.Entity = value;
					if ((value != null))
					{
						value.ReaderReadingSessions.Add(this);
						this._ReaderId = value.Id;
					}
					else
					{
						this._ReaderId = default(int);
					}
					this.SendPropertyChanged("Reader");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReadingSession_ReaderReadingSession", Storage="_ReadingSession", ThisKey="ReadingSessionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ReadingSession ReadingSession
		{
			get
			{
				return this._ReadingSession.Entity;
			}
			set
			{
				ReadingSession previousValue = this._ReadingSession.Entity;
				if (((previousValue != value) 
							|| (this._ReadingSession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReadingSession.Entity = null;
						previousValue.ReaderReadingSessions.Remove(this);
					}
					this._ReadingSession.Entity = value;
					if ((value != null))
					{
						value.ReaderReadingSessions.Add(this);
						this._ReadingSessionId = value.Id;
					}
					else
					{
						this._ReadingSessionId = default(int);
					}
					this.SendPropertyChanged("ReadingSession");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
